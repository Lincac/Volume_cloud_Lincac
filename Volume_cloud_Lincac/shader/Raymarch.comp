#version 430 core

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout(rgba32f, binding = 0) uniform image2D outCloudTex;

uniform sampler3D perlinworley;
uniform sampler3D worley;
uniform sampler2D weather;

uniform vec2 Resolution;
uniform float absorption;
uniform float coverage;
uniform float crispiness;
uniform float curliness;
uniform float densityFactor;
uniform float cloudSpeed;
uniform float cloudType;

uniform vec3 lightDirection;
uniform vec3 lightColor;

uniform float iTime;
uniform vec3 cameraPosition;
uniform mat4 inv_proj;
uniform mat4 inv_view;

const vec3 cloudColorBottom =  vec3(65., 70., 80.)*(1.5/255.);
const vec3 skyColorTop = vec3(0.5, 0.7, 0.8) * 1.05f;
const vec3 skyColorBottom = vec3(0.9, 0.9, 0.95) * 1.05f;

const float earthRadius = 600000.0;
const float sphereInnerRadius = 5000.0;
const float sphereOuterRadius = 17000.0;

#define EARTH_RADIUS earthRadius
#define SPHERE_INNER_RADIUS (EARTH_RADIUS + sphereInnerRadius)
#define SPHERE_OUTER_RADIUS (SPHERE_INNER_RADIUS + sphereOuterRadius)

#define CLOUD_STEP 128
#define LIGHT_STEP 6

vec3 getWorldDir(){
    vec4 ndc = vec4(0.0);
    ndc.x  = (gl_GlobalInvocationID.x/Resolution.x) * 2.0 - 1.0;
    ndc.y  = (gl_GlobalInvocationID.y/Resolution.y) * 2.0 - 1.0;
    ndc.z  =  1.0;
    ndc.w = 1.0 ;

    vec4 view_pos = inv_proj * ndc;
    view_pos = vec4(view_pos.xy,-1.0,0.0);
    vec3 worldDir = (inv_view * view_pos).xyz;
    return normalize(worldDir);
}

vec4 getSkyColor(){
    vec3 worldDir = getWorldDir();

    vec3 col = mix(skyColorBottom, skyColorTop, clamp(1 - exp(8.5-17.*clamp(normalize(worldDir).y*0.5 + 0.5,0.0,1.0)),0.0,1.0));
	float sun = clamp( dot(lightDirection,worldDir), 0.0, 1.0 );
	col += 0.8*vec3(1.0,.6,0.1)*pow(sun, 350);

	return vec4(col, 1.0);
}

vec3 sphereCenter = vec3(0.0, -EARTH_RADIUS, 0.0);
bool raySphereintersection(vec3 ro, vec3 rd, float radius, out vec3 startPos){
	sphereCenter.xz = cameraPosition.xz;

	vec3 L = ro - sphereCenter;
	float a = dot(rd, rd);
	float b = 2.0 * dot(rd, L);
	float c = dot(L,L) - radius*radius;

	float discr = b*b - 4.0 * a * c;
	if(discr < 0.0) return false;
	float t = max(0.0, (-b + sqrt(discr))/(2 * a));
	if(t == 0.0){
		return false;
	}
	startPos = ro + rd*t;

	return true;
}

float HG( float sundotrd, float g) {
	float gg = g * g;
	return (1. - gg) / pow( 1. + gg - 2. * g * sundotrd, 1.5) ;
}

float powder(float d){
	return (1. - exp(-2.*d));
}

vec2 getUVProjection(vec3 p){
	return p.xz/SPHERE_INNER_RADIUS + 0.5;
}

float getHeightFraction(vec3 inPos){
	return (length(inPos - sphereCenter) - SPHERE_INNER_RADIUS)/(SPHERE_OUTER_RADIUS - SPHERE_INNER_RADIUS);
}

float remap(float originalValue, float originalMin, float originalMax, float newMin, float newMax)
{
	return newMin + (((originalValue - originalMin) / (originalMax - originalMin)) * (newMax - newMin));
}

// Cloud types height density gradients
#define STRATUS_GRADIENT vec4(0.0, 0.1, 0.2, 0.3)
#define STRATOCUMULUS_GRADIENT vec4(0.02, 0.2, 0.48, 0.625)
#define CUMULUS_GRADIENT vec4(0.00, 0.1625, 0.88, 0.98)
float getDensityForCloud(float heightFraction, float cloudType)
{
	float stratusFactor = 1.0 - clamp(cloudType * 2.0, 0.0, 1.0);
	float stratoCumulusFactor = 1.0 - abs(cloudType - 0.5) * 2.0;
	float cumulusFactor = clamp(cloudType - 0.5, 0.0, 1.0) * 2.0;

	vec4 baseGradient = stratusFactor * STRATUS_GRADIENT + stratoCumulusFactor * STRATOCUMULUS_GRADIENT + cumulusFactor * CUMULUS_GRADIENT;
	return smoothstep(baseGradient.x, baseGradient.y, heightFraction) - smoothstep(baseGradient.z, baseGradient.w, heightFraction);
}

const vec3 windDirection = normalize(vec3(0.5, 0.0, 0.1));
#define CLOUD_TOP_OFFSET 1750.0
float sampleCloudDensity(vec3 p, bool expensive, float lod){
	float heightFraction = getHeightFraction(p);
	vec3 animation = heightFraction * windDirection * CLOUD_TOP_OFFSET + windDirection * iTime * cloudSpeed;
	vec2 uv = getUVProjection(p);
	vec2 moving_uv = getUVProjection(p + animation);

	if(heightFraction < 0.0 || heightFraction > 1.0){
		return 0.0;
	}

	vec4 low_frequency_noise = textureLod(perlinworley, vec3(uv*crispiness, heightFraction), lod);
	float lowFreqFBM = dot(low_frequency_noise.gba, vec3(0.625, 0.25, 0.125));
	float base_cloud = remap(low_frequency_noise.r, -(1.0 - lowFreqFBM), 1., 0.0 , 1.0);
	
	float density = getDensityForCloud(heightFraction, cloudType);
	base_cloud *= (density/heightFraction);

	vec3 weather_data = texture(weather, moving_uv).rgb;
	float cloud_coverage = weather_data.r*coverage;
	float base_cloud_with_coverage = remap(base_cloud , cloud_coverage , 1.0 , 0.0 , 1.0);
	base_cloud_with_coverage *= cloud_coverage;

	if(expensive)
	{
		vec3 erodeCloudNoise = textureLod(worley, vec3(moving_uv*crispiness, heightFraction)*curliness, lod).rgb;
		float highFreqFBM = dot(erodeCloudNoise.rgb, vec3(0.625, 0.25, 0.125));
		float highFreqNoiseModifier = mix(highFreqFBM, 1.0 - highFreqFBM, clamp(heightFraction * 10.0, 0.0, 1.0));
		base_cloud_with_coverage = base_cloud_with_coverage - highFreqNoiseModifier * (1.0 - base_cloud_with_coverage);
		base_cloud_with_coverage = remap(base_cloud_with_coverage*2.0, highFreqNoiseModifier * 0.2, 1.0, 0.0, 1.0);
	}

	return clamp(base_cloud_with_coverage, 0.0, 1.0);
}

uniform vec3 noiseKernel[6u] = vec3[] 
(
	vec3( 0.38051305,  0.92453449, -0.02111345),
	vec3(-0.50625799, -0.03590792, -0.86163418),
	vec3(-0.32509218, -0.94557439,  0.01428793),
	vec3( 0.09026238, -0.27376545,  0.95755165),
	vec3( 0.28128598,  0.42443639, -0.86065785),
	vec3(-0.16852403,  0.14748697,  0.97460106)
);
float raymarchToLight(vec3 o, float stepSize)
{
	float ds = stepSize * LIGHT_STEP;
	vec3 rayStep = lightDirection * ds;
	const float CONE_STEP = 1.0/LIGHT_STEP;
	float coneRadius = 1.0; 
	float density = 0.0;
	float sigma_ds = -ds*absorption;

	vec3 startPos = o;

	float T = 1.0;
	for(int i = 0; i < LIGHT_STEP; i++)
	{
		vec3 pos = startPos + coneRadius*noiseKernel[i]*float(i);
		float heightFraction = getHeightFraction(pos);
		if(heightFraction >= 0)
		{
			float cloudDensity = sampleCloudDensity(pos, density > 0.3, i/16);
			if(cloudDensity > 0.0)
			{
				T *= exp(cloudDensity*sigma_ds);
				density += cloudDensity;
			}
		}
		startPos += rayStep;
		coneRadius += CONE_STEP;
	}
	return T;
}

#define BAYER_FACTOR 1.0/16.0
uniform float bayerFilter[16u] = float[]
(
	0.0*BAYER_FACTOR, 8.0*BAYER_FACTOR, 2.0*BAYER_FACTOR, 10.0*BAYER_FACTOR,
	12.0*BAYER_FACTOR, 4.0*BAYER_FACTOR, 14.0*BAYER_FACTOR, 6.0*BAYER_FACTOR,
	3.0*BAYER_FACTOR, 11.0*BAYER_FACTOR, 1.0*BAYER_FACTOR, 9.0*BAYER_FACTOR,
	15.0*BAYER_FACTOR, 7.0*BAYER_FACTOR, 13.0*BAYER_FACTOR, 5.0*BAYER_FACTOR
);
vec4 raymarchToCloud(vec3 startPos, vec3 endPos, vec3 bg){
    vec3 path = endPos - startPos;
    float len = length(path);
    float ds = len / CLOUD_STEP;
    vec3 dir = normalize(path) * ds;
	float sigma_ds = -ds * densityFactor;

	float lightDotEye = dot(normalize(lightDirection), normalize(dir));

    uvec2 fragCoord = gl_GlobalInvocationID.xy;
	int a = int(fragCoord.x) % 4;
	int b = int(fragCoord.y) % 4;
    vec3 pos = startPos + dir * bayerFilter[a * 4 + b];

	float T = 1.0;
    vec4 color = vec4(0.0);
    for(int i = 0;i<CLOUD_STEP;i++){
		float density_sample = sampleCloudDensity(pos, true, i/16);
		if(density_sample > 0.)
		{
			float dTrans = exp(density_sample*sigma_ds);

			float light_density = raymarchToLight(pos, ds*0.1);
			float scattering = mix(HG(lightDotEye, -0.08), HG(lightDotEye, 0.08), clamp(lightDotEye*0.5 + 0.5, 0.0, 1.0));
			vec3 S = 0.6*( mix( mix(cloudColorBottom*1.8, bg, 0.2), scattering*lightColor, light_density)) * density_sample;
			vec3 Sint = (S - S * dTrans) * (1. / density_sample);

			color.rgb += T * Sint;

			T *= dTrans;
		}
		if( T <= 1e-1 ) break;
		pos += dir;
	}
	color.a = 1.0 - T;
	
	return color;
}

void main(){
    vec4 fragColor_v;
    ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);
	
    vec4 bg = getSkyColor();
    fragColor_v = bg;
    vec3 worldDir = getWorldDir();

    vec3 startPos,endPos;
	if(cameraPosition.y < SPHERE_INNER_RADIUS - EARTH_RADIUS){
		raySphereintersection(cameraPosition, worldDir, SPHERE_INNER_RADIUS, startPos);
		raySphereintersection(cameraPosition, worldDir, SPHERE_OUTER_RADIUS, endPos);
	}else if(cameraPosition.y > SPHERE_INNER_RADIUS - EARTH_RADIUS && cameraPosition.y < SPHERE_OUTER_RADIUS - EARTH_RADIUS){
		startPos = cameraPosition;
		raySphereintersection(cameraPosition, worldDir, SPHERE_OUTER_RADIUS, endPos);
	}else{
		raySphereintersection(cameraPosition, worldDir, SPHERE_OUTER_RADIUS, startPos);
		raySphereintersection(cameraPosition, worldDir, SPHERE_INNER_RADIUS, endPos);
	}

	if(worldDir.y <= 0.){
		imageStore(outCloudTex, texelCoord, fragColor_v);
		return;
	}

	vec4 v_cloud = raymarchToCloud(startPos,endPos,bg.rgb);
	v_cloud.rgb = v_cloud.rgb*1.8 - 0.1; // 增加颜色的饱和度和对比度，使其看起来更亮或更暗。

	float sun = clamp( dot(lightDirection,normalize(endPos - startPos)), 0.0, 1.0 );
	vec3 s = 0.8*vec3(1.0,0.4,0.2)*pow( sun, 256.0 );
	v_cloud.rgb += s*v_cloud.a;

	bg.rgb = bg.rgb*(1.0 - v_cloud.a) + v_cloud.rgb;
	bg.a = 1.0;

	fragColor_v = bg;
	fragColor_v.a = 1.0;

    imageStore(outCloudTex, texelCoord, fragColor_v);
}